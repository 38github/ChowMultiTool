#pragma once

#include <pch.h>

namespace dsp::pultec
{
namespace wdft = chowdsp::wdft;

/** WDF Inductor Node with some saturating nonlinear behaviour */
template <typename T>
class NonlinearInductorT final : public wdft::BaseWDF
{
public:
    explicit NonlinearInductorT (T value, T fs = (T) 48000.0) : L_value (value),
                                                                fs (fs)
    {
        calcImpedance();
    }

    void prepare (T sampleRate)
    {
        fs = sampleRate;
        propagateImpedanceChange();

        reset();
    }

    void reset()
    {
        z = (T) 0.0;
    }

    void setInductanceValue (T newL)
    {
        if (newL == L_value)
            return;

        L_value = newL;
        propagateImpedanceChange();
    }

    inline void calcImpedance() override
    {
        wdf.R = (T) 2.0 * L_value * fs;
        wdf.G = (T) 1.0 / wdf.R;
    }

    inline void incident (T x) noexcept
    {
        wdf.a = x;
        z = std::tanh (wdf.a);
    }

    inline T reflected() noexcept
    {
        wdf.b = -z;
        return wdf.b;
    }

    wdft::WDFMembers<T> wdf;

private:
    T L_value = (T) 1.0e-6;
    T z = (T) 0.0;

    T fs;
};

// Reference: https://www.gyraf.dk/gy_pd/pultec/pultech.gif
class PultecEqWDF
{
public:
    PultecEqWDF() = default;

    void prepare (float sampleRate)
    {
        C_treble_boost.prepare (sampleRate);
        L_treble_boost.prepare (sampleRate);
        C_low_boost.prepare (sampleRate);
        C_treble_cut.prepare (sampleRate);
        C_low_cut.prepare (sampleRate);
    }

    void setParameters (float treble_boost, float treble_boost_q, int treble_boost_freq, float treble_cut, int treble_cut_freq, float low_boost, float low_cut, int bass_freq)
    {
        // @TODO: defer impedance changes?

        P_low_cut.setResistanceValue (1.0f + std::pow (low_cut, 1.443f) * 99.999e3f);
        P_low_boost.setResistanceValue (1.0f + std::pow (low_boost, 2.587f) * 9.999e3f);
        if (bass_freq == 0) // 20 Hz
        {
            C_low_boost.setCapacitanceValue (2.2e-6f);
            C_low_cut.setCapacitanceValue (100.0e-9f);
        }
        else if (bass_freq == 1) // 30 Hz
        {
            C_low_boost.setCapacitanceValue (1.0e-6f);
            C_low_cut.setCapacitanceValue (47.0e-9f);
        }
        else if (bass_freq == 2) // 60 Hz
        {
            C_low_boost.setCapacitanceValue (470.0e-9f);
            C_low_cut.setCapacitanceValue (22.0e-9f);
        }
        else if (bass_freq == 3) // 100 Hz
        {
            C_low_boost.setCapacitanceValue (330.0e-9f);
            C_low_cut.setCapacitanceValue (15.0e-9f);
        }

        const auto treble_cut_skew = std::pow (treble_cut, 0.395f);
        P_treble_cut_plus.setResistanceValue (1.0e3f * (1.0f - treble_cut_skew));
        P_treble_cut_minus.setResistanceValue (1.0e3f * treble_cut_skew);
        if (treble_cut_freq == 0) // 20k
            C_treble_cut.setCapacitanceValue (47.0e-9f);
        else if (treble_cut_freq == 1) // 10k
            C_treble_cut.setCapacitanceValue (2.0f * 47.0e-9f);
        else if (treble_cut_freq == 2) // 5k
            C_treble_cut.setCapacitanceValue (47.0e-9f + 150.0e-9f);

        const auto treble_boost_skew = std::pow (treble_boost, 0.621f);
        P_treble_boost_plus.setResistanceValue (10.0e3f * (1.0f - treble_boost_skew));
        P_treble_boost_minus.setResistanceValue (10.0e3f * treble_boost_skew);
        R_treble_boost_bw.setResistanceValue (1.0f + (1.0f - treble_boost_q) * 2499.0f);
        if (treble_boost_freq == 0) // 3k
        {
            C_treble_boost.setCapacitanceValue (15.0e-9f);
            L_treble_boost.setInductanceValue (175.0e-3f);
        }
        else if (treble_boost_freq == 1) // 4k
        {
            C_treble_boost.setCapacitanceValue (15.0e-9f);
            L_treble_boost.setInductanceValue (100.0e-3f);
        }
        else if (treble_boost_freq == 2) // 5k
        {
            C_treble_boost.setCapacitanceValue (10.0e-9f);
            L_treble_boost.setInductanceValue (90.0e-3f);
        }
        else if (treble_boost_freq == 3) // 8k
        {
            C_treble_boost.setCapacitanceValue (10.0e-9f);
            L_treble_boost.setInductanceValue (40.0e-3f);
        }
        else if (treble_boost_freq == 4) // 10k
        {
            C_treble_boost.setCapacitanceValue (6.8e-9f);
            L_treble_boost.setInductanceValue (35.0e-3f);
        }
        else if (treble_boost_freq == 5) // 12k
        {
            C_treble_boost.setCapacitanceValue (6.8e-9f);
            L_treble_boost.setInductanceValue (23.0e-3f);
        }
        else if (treble_boost_freq == 6) // 16k
        {
            C_treble_boost.setCapacitanceValue (3.3e-9f);
            L_treble_boost.setInductanceValue (19.0e-3f);
        }
    }

    inline float process (float x) noexcept
    {
        Vin.setVoltage (x);

        Vin.incident (Pvin.reflected());
        Pvin.incident (Vin.reflected());

        return wdft::voltage<float> (Rload);
    }

private:
    // Port B
    wdft::ResistorT<float> P_low_cut { 100.0e3f };
    wdft::CapacitorT<float> C_low_cut { 0.012e-6f }; // 100 Hz
    wdft::WDFParallelT<float, decltype (P_low_cut), decltype (C_low_cut)> Pb { P_low_cut, C_low_cut };
    wdft::ResistorT<float> Rlc { 1.0e3f };
    wdft::WDFSeriesT<float, decltype (Pb), decltype (Rlc)> Sb { Pb, Rlc };

    // Port C
    wdft::ResistorT<float> P_treble_cut_plus { 500.0f };

    // Port D
    wdft::ResistorT<float> Rc { 75.0f };
    wdft::CapacitorT<float> C_treble_cut { 0.068e-6f }; // 20 kHz
    wdft::WDFSeriesT<float, decltype (Rc), decltype (C_treble_cut)> Streble_cut { Rc, C_treble_cut };
    wdft::ResistorT<float> P_treble_cut_minus { 500.0f };
    wdft::WDFParallelT<float, decltype (Streble_cut), decltype (P_treble_cut_minus)> Ptreble_cut { Streble_cut, P_treble_cut_minus };

    // Port E
    wdft::ResistorT<float> P_low_boost { 9.0e3f };
    wdft::CapacitorT<float> C_low_boost { 0.33e-6f }; // 100Hz
    wdft::WDFParallelT<float, decltype (P_low_boost), decltype (C_low_boost)> Pbass_boost { P_low_boost, C_low_boost };

    // Port F
    wdft::ResistorT<float> Rb { 10.0e3f };

    // Port G
    wdft::ResistorT<float> Rload { 1.0e6f };

    // R-Type
    struct ImpedanceCalc
    {
        template <typename RType>
        static float calcImpedance (RType& R)
        {
            const auto [Rb, Rc, Rd, Re, Rf, Rg] = R.getPortImpedances();

            // This scattering matrix was derived using the R-Solver python script (https://github.com/jatinchowdhury18/R-Solver),
            // invoked with command: r_solver.py --adapt 5 --out scratch/common_cathode_scatt.txt scratch/common_cathode.txt
            R.setSMatrixData ({ { 0, -((Rc + Rd) * Re + (Rc + Rd + Re) * Rf + (Rc + Rd) * Rg) / ((Rb + Rc + Rd) * Re + (Rb + Rc + Rd + Re) * Rf + (Rb + Rc + Rd + Rf) * Rg), -(Rb * Re + Rb * Rf + (Rb + Rf) * Rg) / ((Rb + Rc + Rd) * Re + (Rb + Rc + Rd + Re) * Rf + (Rb + Rc + Rd + Rf) * Rg), -(Rb * Re + Rb * Rf + (Rb + Rf) * Rg) / ((Rb + Rc + Rd) * Re + (Rb + Rc + Rd + Re) * Rf + (Rb + Rc + Rd + Rf) * Rg), -(Rb * Rf + (Rb + Rc + Rd + Rf) * Rg) / ((Rb + Rc + Rd) * Re + (Rb + Rc + Rd + Re) * Rf + (Rb + Rc + Rd + Rf) * Rg), (Rb * Re - (Rc + Rd) * Rg) / ((Rb + Rc + Rd) * Re + (Rb + Rc + Rd + Re) * Rf + (Rb + Rc + Rd + Rf) * Rg), -((Rb + Rc + Rd) * Re + (Rc + Rd + Re) * Rf) / ((Rb + Rc + Rd) * Re + (Rb + Rc + Rd + Re) * Rf + (Rb + Rc + Rd + Rf) * Rg) },
                                { -((Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + Rb * Re) * Rf + (Rb * Rc + Rb * Rd) * Rg) / ((Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + Rb * Re) * Rf + (Rb * Rc + Rb * Rd + (Rb + Rc + Rd) * Re + (Rc + Rd + Re) * Rf) * Rg), -((Rb * Rb * Rc + Rb * Rb * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rb * Rd + Rb * Rb * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rb * Rd - (Rc + Rd + Re) * Rf * Rf + (Rb * Rb - Rc * Rc - 2 * Rc * Rd - Rd * Rd) * Re - (Rc * Rc + 2 * Rc * Rd + Rd * Rd + 2 * (Rc + Rd) * Re) * Rf) * Rg * Rg + (Rb * Rb * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rb * Rd) * Re) * Rf + ((Rb * Rb - Rc * Rc - 2 * Rc * Rd - Rd * Rd) * Re * Re - (Rc * Rc + 2 * Rc * Rd + Rd * Rd + 2 * (Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rb * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rb * Rd - (Rc + Rd) * Re * Re + (Rb * Rb - Rc * Rc - 2 * Rc * Rd - Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((Rb * Rb * Rc + Rb * Rb * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rb * Rd + Rb * Rb * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rb * Rd + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + 2 * Rb * Re) * Rf) * Rg * Rg + (Rb * Rb * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rb * Rd) * Re) * Rf + (2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re + (Rb * Rc + Rb * Rd + Rb * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rb * Rd) * Re + (2 * Rb * Rb * Rc + 2 * Rb * Rb * Rd + 2 * Rb * Re * Re + 3 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((Rb * Rb * Rc + Rb * Rb * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rb * Rd + Rb * Rb * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rb * Rd + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + 2 * Rb * Re) * Rf) * Rg * Rg + (Rb * Rb * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rb * Rd) * Re) * Rf + (2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re + (Rb * Rc + Rb * Rd + Rb * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rb * Rd) * Re + (2 * Rb * Rb * Rc + 2 * Rb * Rb * Rd + 2 * Rb * Re * Re + 3 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((Rb * Rb * Rc + Rb * Rb * Rd) * Re * Rf + (Rb * Rb * Rc + Rb * Rb * Rd + Rb * Rb * Re) * Rf * Rf - (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rc + Rb * Rd) * Rf) * Rg * Rg + ((Rb * Rc + Rb * Rd + Rb * Re) * Rf * Rf - (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re - (Rb * Rc * Rc + 2 * Rb * Rc * Rd + Rb * Rd * Rd - Rb * Rb * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((Rb * Rb * Rc + Rb * Rb * Rd) * Re * Re + (2 * Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + 2 * (Rb * Rb + Rb * Rc) * Rd + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re + 2 * (Rb * Rc + Rb * Rd + Rb * Re) * Rf) * Rg * Rg + (Rb * Rb * Re * Re + (Rb * Rb * Rc + Rb * Rb * Rd) * Re) * Rf + (2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re + (3 * Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (3 * Rb * Rb + 2 * Rb * Rc) * Rd) * Re + (2 * Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + 2 * Rb * Re * Re + 2 * (Rb * Rb + Rb * Rc) * Rd + (2 * Rb * Rb + 3 * Rb * Rc + 3 * Rb * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (2 * Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + 2 * (Rb * Rb + Rb * Rc) * Rd + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re) * Rf * Rf + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + (3 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rd * Rd + (3 * Rb * Rb + 4 * Rb * Rc) * Rd) * Re) * Rf + (2 * (Rb * Rc + Rb * Rd + Rb * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + (2 * Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + 2 * (Rb * Rb + Rb * Rc) * Rd + (2 * Rb * Rb + 3 * Rb * Rc + 3 * Rb * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg) },
                                { -(Rb * Rc * Re + Rb * Rc * Rf + (Rb * Rc + Rc * Rf) * Rg) / ((Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + Rb * Re) * Rf + (Rb * Rc + Rb * Rd + (Rb + Rc + Rd) * Re + (Rc + Rd + Re) * Rf) * Rg), ((Rb * Rc * Rc + Rb * Rc * Rd) * Re * Re + (Rb * Rc * Rc + Rb * Rc * Rd + Rb * Rc * Re) * Rf * Rf + (Rb * Rc * Rc + Rb * Rc * Rd + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re + (Rc * Rc + Rc * Rd + 2 * Rc * Re) * Rf) * Rg * Rg + (Rb * Rc * Re * Re + 2 * (Rb * Rc * Rc + Rb * Rc * Rd) * Re) * Rf + (2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re * Re + (Rc * Rc + Rc * Rd + Rc * Re) * Rf * Rf + 2 * (Rb * Rc * Rc + Rb * Rc * Rd) * Re + (2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd + 2 * Rc * Re * Re + 3 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((Rb * Rc * Rc - Rb * Rb * Rd - Rb * Rd * Rd) * Re * Re + (Rb * Rc * Rc - Rb * Rb * Rd - Rb * Rd * Rd - Rb * Re * Re - (Rb * Rb + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rc * Rc - Rb * Rb * Rd - Rb * Rd * Rd - (Rd + Re) * Rf * Rf - (Rb * Rb - Rc * Rc + 2 * Rb * Rd + Rd * Rd) * Re + (Rc * Rc - 2 * Rb * Rd - Rd * Rd - 2 * (Rb + Rd) * Re) * Rf) * Rg * Rg - ((Rb * Rb + 2 * Rb * Rd) * Re * Re - 2 * (Rb * Rc * Rc - Rb * Rb * Rd - Rb * Rd * Rd) * Re) * Rf - ((Rb * Rb - Rc * Rc + 2 * Rb * Rd + Rd * Rd) * Re * Re - (Rc * Rc - 2 * Rb * Rd - Rd * Rd - 2 * (Rb + Rd) * Re - Re * Re) * Rf * Rf - 2 * (Rb * Rc * Rc - Rb * Rb * Rd - Rb * Rd * Rd) * Re - 2 * (Rb * Rc * Rc - Rb * Rb * Rd - Rb * Rd * Rd - (Rb + Rd) * Re * Re - (Rb * Rb - Rc * Rc + 3 * Rb * Rd + Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd) * Re * Re + (Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd + 2 * Rb * Rc * Re) * Rf * Rf + (Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd + Rc * Rf * Rf + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re + 2 * (Rb * Rc + Rc * Rc + Rc * Rd + Rc * Re) * Rf) * Rg * Rg + 2 * (Rb * Rc * Re * Re + (Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd) * Re) * Rf + 2 * ((Rb * Rc + Rc * Rc + Rc * Rd) * Re * Re + (Rb * Rc + Rc * Rc + Rc * Rd + Rc * Re) * Rf * Rf + (Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd) * Re + (Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd + Rc * Re * Re + (3 * Rb * Rc + 2 * Rc * Rc + 2 * Rc * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd) * Re * Rf + (Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd + 2 * Rb * Rc * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rc * Rd + Rc * Rf * Rf + (2 * Rb * Rc + Rc * Rc + Rc * Rd) * Rf) * Rg * Rg + (2 * (Rb * Rc + Rc * Rc + Rc * Rd + Rc * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rc * Rd) * Re + (2 * Rb * Rb * Rc + 3 * Rb * Rc * Rc + 3 * Rb * Rc * Rd + (3 * Rb * Rc + 2 * Rc * Rc + 2 * Rc * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd) * Re * Re + (Rb * Rc * Rc + Rb * Rc * Rd + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re + (Rc * Rc + Rc * Rd + 2 * Rc * Re) * Rf) * Rg * Rg + (2 * Rb * Rc * Re * Re + (Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd) * Re) * Rf + (2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re * Re + (Rb * Rb * Rc + 3 * Rb * Rc * Rc + 3 * Rb * Rc * Rd) * Re + (Rb * Rc * Rc + Rb * Rc * Rd + 2 * Rc * Re * Re + (3 * Rb * Rc + 2 * Rc * Rc + 2 * Rc * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rc * Rd) * Re * Re - (Rb * Rc * Rc + Rb * Rc * Rd + Rb * Rc * Re) * Rf * Rf + (Rb * Rb * Rc * Re + Rb * Rc * Re * Re) * Rf - ((Rc * Rc + Rc * Rd + Rc * Re) * Rf * Rf - (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rc * Rd) * Re + (Rb * Rc * Rc + Rb * Rc * Rd + (Rc * Rc + Rc * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg) },
                                { -(Rb * Rd * Re + Rb * Rd * Rf + (Rb * Rd + Rd * Rf) * Rg) / ((Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + Rb * Re) * Rf + (Rb * Rc + Rb * Rd + (Rb + Rc + Rd) * Re + (Rc + Rd + Re) * Rf) * Rg), ((Rb * Rc * Rd + Rb * Rd * Rd) * Re * Re + (Rb * Rc * Rd + Rb * Rd * Rd + Rb * Rd * Re) * Rf * Rf + (Rb * Rc * Rd + Rb * Rd * Rd + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Re + (Rc * Rd + Rd * Rd + 2 * Rd * Re) * Rf) * Rg * Rg + (Rb * Rd * Re * Re + 2 * (Rb * Rc * Rd + Rb * Rd * Rd) * Re) * Rf + (2 * ((Rb + Rc) * Rd + Rd * Rd) * Re * Re + (Rc * Rd + Rd * Rd + Rd * Re) * Rf * Rf + 2 * (Rb * Rc * Rd + Rb * Rd * Rd) * Re + (2 * Rb * Rc * Rd + 2 * Rb * Rd * Rd + 2 * Rd * Re * Re + 3 * ((Rb + Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((2 * Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (2 * Rb * Rd * Rd + 2 * Rb * Rd * Re + (Rb * Rb + 2 * Rb * Rc) * Rd) * Rf * Rf + (2 * Rb * Rd * Rd + Rd * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Re + 2 * ((Rb + Rc) * Rd + Rd * Rd + Rd * Re) * Rf) * Rg * Rg + 2 * (Rb * Rd * Re * Re + (2 * Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + 2 * (((Rb + Rc) * Rd + Rd * Rd) * Re * Re + ((Rb + Rc) * Rd + Rd * Rd + Rd * Re) * Rf * Rf + (2 * Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + (2 * Rb * Rd * Rd + Rd * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + ((3 * Rb + 2 * Rc) * Rd + 2 * Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((Rb * Rb * Rc + Rb * Rc * Rc - Rb * Rd * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc - Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc - Rb * Rd * Rd + (Rc + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc + Rc * Rc - Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc - Rd * Rd + 2 * (Rb + Rc) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc - Rb * Rd * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc - Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc - Rd * Rd + 2 * (Rb + Rc) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc - Rb * Rd * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc - Rb * Rd * Rd + (Rb + Rc) * Re * Re + (Rb * Rb + 3 * Rb * Rc + Rc * Rc - Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((2 * Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Rf + (2 * Rb * Rd * Rd + 2 * Rb * Rd * Re + (Rb * Rb + 2 * Rb * Rc) * Rd) * Rf * Rf + (Rb * Rd * Rd + Rd * Rf * Rf + (Rb * Rb + Rb * Rc) * Rd + ((2 * Rb + Rc) * Rd + Rd * Rd) * Rf) * Rg * Rg + (2 * ((Rb + Rc) * Rd + Rd * Rd + Rd * Re) * Rf * Rf + (Rb * Rd * Rd + (Rb * Rb + Rb * Rc) * Rd) * Re + (3 * Rb * Rd * Rd + (2 * Rb * Rb + 3 * Rb * Rc) * Rd + ((3 * Rb + 2 * Rc) * Rd + 2 * Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((2 * Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rc * Rd + Rb * Rd * Rd + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Re + (Rc * Rd + Rd * Rd + 2 * Rd * Re) * Rf) * Rg * Rg + (2 * Rb * Rd * Re * Re + (2 * Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + (2 * ((Rb + Rc) * Rd + Rd * Rd) * Re * Re + (3 * Rb * Rd * Rd + (Rb * Rb + 3 * Rb * Rc) * Rd) * Re + (Rb * Rc * Rd + Rb * Rd * Rd + 2 * Rd * Re * Re + ((3 * Rb + 2 * Rc) * Rd + 2 * Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((Rb * Rd * Rd + (Rb * Rb + Rb * Rc) * Rd) * Re * Re - (Rb * Rc * Rd + Rb * Rd * Rd + Rb * Rd * Re) * Rf * Rf + (Rb * Rb * Rd * Re + Rb * Rd * Re * Re) * Rf - ((Rc * Rd + Rd * Rd + Rd * Re) * Rf * Rf - (Rb * Rd * Rd + (Rb * Rb + Rb * Rc) * Rd) * Re + (Rb * Rc * Rd + Rb * Rd * Rd + (Rc * Rd + Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg) },
                                { -(Rb * Re * Rf + ((Rb + Rc + Rd) * Re + Re * Rf) * Rg) / ((Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + Rb * Re) * Rf + (Rb * Rc + Rb * Rd + (Rb + Rc + Rd) * Re + (Rc + Rd + Re) * Rf) * Rg), ((Rb * Rc + Rb * Rd) * Re * Re * Rf + (Rb * Re * Re + (Rb * Rc + Rb * Rd) * Re) * Rf * Rf - ((Rc + Rd) * Re * Rf + (Rb * Rc + Rc * Rc + (Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rg * Rg - ((Rb * Rc + Rc * Rc + (Rb + 2 * Rc) * Rd + Rd * Rd) * Re * Re - ((Rc + Rd) * Re + Re * Re) * Rf * Rf - (Rb * Re * Re - (Rc * Rc + 2 * Rc * Rd + Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re * Rf + (2 * Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + ((2 * Rb + Rc + Rd) * Re * Rf + Re * Rf * Rf + (Rb * Rb + Rb * Rc + Rb * Rd) * Re) * Rg * Rg + ((Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re + 2 * ((Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + ((3 * Rb + 2 * Rc + 2 * Rd) * Re * Re + (2 * Rb * Rb + 3 * Rb * Rc + 3 * Rb * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re * Rf + (2 * Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + ((2 * Rb + Rc + Rd) * Re * Rf + Re * Rf * Rf + (Rb * Rb + Rb * Rc + Rb * Rd) * Re) * Rg * Rg + ((Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re + 2 * ((Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + ((3 * Rb + 2 * Rc + 2 * Rd) * Re * Re + (2 * Rb * Rb + 3 * Rb * Rc + 3 * Rb * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re - (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd - Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd) * Rf * Rf - (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re - (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd - Re * Re) * Rf * Rf - 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd - (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -(2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + ((Rc + Rd) * Re * Rf + (Rb * Rc + Rc * Rc + (Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 3 * Rb * Rc + 2 * Rc * Rc + (3 * Rb + 4 * Rc) * Rd + 2 * Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + ((Rb + 2 * Rc + 2 * Rd) * Re * Re + (3 * Rb * Rc + 2 * Rc * Rc + (3 * Rb + 4 * Rc) * Rd + 2 * Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), (2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Re * Re + (Rb * Rc + Rb * Rd) * Re) * Rf * Rf + ((Rb * Rb + 3 * Rb * Rc + 3 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + ((Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + (2 * (Rb + Rc + Rd) * Re * Re + (3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg) },
                                { (Rb * Re * Rf - (Rc + Rd) * Rf * Rg) / ((Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + Rb * Re) * Rf + (Rb * Rc + Rb * Rd + (Rb + Rc + Rd) * Re + (Rc + Rd + Re) * Rf) * Rg), -((Rb * Rc + Rb * Rd) * Re * Re * Rf + (Rb * Re * Re + (Rb * Rc + Rb * Rd) * Re) * Rf * Rf + (2 * (Rc + Rd + Re) * Rf * Rf + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + (2 * Rb + 3 * Rc + 3 * Rd) * Re + 2 * Re * Re) * Rf * Rf + (2 * (Rb + Rc + Rd) * Re * Re + (3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re * Rf + (2 * Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + ((Rc + Rd + 2 * Re) * Rf * Rf + (Rb * Rc + Rb * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rc + Rb * Rd + (3 * Rb + 2 * Rc + 2 * Rd) * Re + 2 * Re * Re) * Rf * Rf + (2 * (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 3 * Rb * Rc + 3 * Rb * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re * Rf + (2 * Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + ((Rc + Rd + 2 * Re) * Rf * Rf + (Rb * Rc + Rb * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rc + Rb * Rd + (3 * Rb + 2 * Rc + 2 * Rd) * Re + 2 * Re * Re) * Rf * Rf + (2 * (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 3 * Rb * Rc + 3 * Rb * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), -(2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Rf + (2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rd * Rd + 2 * (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + ((Rc + Rd) * Rf * Rf + (Rb * Rc + Rc * Rc + (Rb + 2 * Rc) * Rd + Rd * Rd) * Rf) * Rg * Rg + ((3 * Rb * Rc + 2 * Rc * Rc + (3 * Rb + 4 * Rc) * Rd + 2 * Rd * Rd + (Rb + 2 * Rc + 2 * Rd) * Re) * Rf * Rf + (2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rd * Rd + 2 * (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + 2 * Rc * Rc + (3 * Rb + 4 * Rc) * Rd + 2 * Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re - (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd - (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re - (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rd * Rd + Rb * Re * Re + 2 * (Rb * Rb + 2 * Rb * Rc) * Rd + (2 * Rb * Rb + 3 * Rb * Rc + 3 * Rb * Rd) * Re) * Rf * Rf + ((Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + (2 * Rb + Rc + Rd) * Re) * Rf * Rf + (2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rd * Rd + 2 * (Rb * Rb + 2 * Rb * Rc) * Rd + (2 * Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg) },
                                { -((Rb + Rc + Rd) * Re + (Rc + Rd + Re) * Rf) * Rg / ((Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + Rb * Re) * Rf + (Rb * Rc + Rb * Rd + (Rb + Rc + Rd) * Re + (Rc + Rd + Re) * Rf) * Rg), -((2 * (Rc + Rd + Re) * Rf * Rf + (Rb * Rc + Rc * Rc + (Rb + 2 * Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + (2 * Rb + 3 * Rc + 3 * Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rc + Rc * Rc + (Rb + 2 * Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + ((Rb + 2 * Rc + 2 * Rd) * Re * Re + (3 * Rb * Rc + 2 * Rc * Rc + (3 * Rb + 4 * Rc) * Rd + 2 * Rd * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), (((Rc + Rd + Re) * Rf * Rf - (Rb * Rb + Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + (Rc + Rd) * Re) * Rf) * Rg * Rg - ((Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re - (Rb * Rc + Rb * Rd + Rb * Re) * Rf * Rf + (Rb * Rb * Re + Rb * Re * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), (((Rc + Rd + Re) * Rf * Rf - (Rb * Rb + Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + (Rc + Rd) * Re) * Rf) * Rg * Rg - ((Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re - (Rb * Rc + Rb * Rd + Rb * Re) * Rf * Rf + (Rb * Rb * Re + Rb * Re * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + 2 * (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rc + Rb * Rd + Rb * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + (2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rd * Rd + 2 * (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + 3 * Rb * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rd * Rd + 2 * (Rb * Rb + 2 * Rb * Rc) * Rd + (2 * Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + (2 * Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + (2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rd * Rd + Rb * Re * Re + 2 * (Rb * Rb + 2 * Rb * Rc) * Rd + (2 * Rb * Rb + 3 * Rb * Rc + 3 * Rb * Rd) * Re) * Rf) * Rg) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg), ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf - (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf) / ((Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + Rb * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re) * Rf * Rf + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rc + Rd + Re) * Rf * Rf + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re) * Rf) * Rg * Rg + ((Rb * Rb + 2 * Rb * Rc + 2 * Rb * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re) * Rf + ((Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + (2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd + 2 * (Rb + Rc + Rd) * Re + Re * Re) * Rf * Rf + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb + Rc + Rd) * Re * Re + (Rb * Rb + 2 * Rb * Rc) * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc + (3 * Rb + 2 * Rc) * Rd + Rd * Rd) * Re) * Rf) * Rg) } });

            const auto Ra = ((Rb * Rc + Rb * Rd) * Re + (Rb * Rc + Rb * Rd + Rb * Re) * Rf + (Rb * Rc + Rb * Rd + (Rb + Rc + Rd) * Re + (Rc + Rd + Re) * Rf) * Rg) / ((Rb + Rc + Rd) * Re + (Rb + Rc + Rd + Re) * Rf + (Rb + Rc + Rd + Rf) * Rg);
            return Ra;
        }
    };

    wdft::RtypeAdaptor<float, 0, ImpedanceCalc, decltype (Sb), decltype (P_treble_cut_plus), decltype (Ptreble_cut), decltype (Pbass_boost), decltype (Rb), decltype (Rload)> R { Sb, P_treble_cut_plus, Ptreble_cut, Pbass_boost, Rb, Rload };

    // Port A
    wdft::CapacitorT<float> C_treble_boost { 0.0082e-6f }; // 8 kHz
    NonlinearInductorT<float> L_treble_boost { 47.0e-3f }; // 8 kHz
    wdft::WDFSeriesT<float, decltype (C_treble_boost), decltype (L_treble_boost)> Streble_boost_1 { C_treble_boost, L_treble_boost };
    wdft::ResistorT<float> R_treble_boost_bw { 2.0e3f };
    wdft::WDFSeriesT<float, decltype (Streble_boost_1), decltype (R_treble_boost_bw)> Streble_boost { Streble_boost_1, R_treble_boost_bw };
    wdft::ResistorT<float> P_treble_boost_minus { 5.0e3f };
    wdft::WDFParallelT<float, decltype (Streble_boost), decltype (P_treble_boost_minus)> Ptreble_boost { Streble_boost, P_treble_boost_minus };
    wdft::ResistorT<float> P_treble_boost_plus { 5.0e3f };
    wdft::WDFSeriesT<float, decltype (Ptreble_boost), decltype (P_treble_boost_plus)> Svin { Ptreble_boost, P_treble_boost_plus };
    wdft::WDFSeriesT<float, decltype (Svin), decltype (R)> SR { Svin, R };
    wdft::ResistorT<float> Ra { 620.0f };
    wdft::WDFParallelT<float, decltype (Ra), decltype (SR)> Pvin { Ra, SR };
    wdft::IdealVoltageSourceT<float, decltype (Pvin)> Vin { Pvin };
};
} // namespace dsp::pultec
